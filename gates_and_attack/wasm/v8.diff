diff --git a/src/codegen/x64/assembler-x64.cc b/src/codegen/x64/assembler-x64.cc
index 37fe52595e..dce9481995 100644
--- a/src/codegen/x64/assembler-x64.cc
+++ b/src/codegen/x64/assembler-x64.cc
@@ -1218,6 +1218,12 @@ void Assembler::lfence() {
   emit(0xE8);
 }
 
+void Assembler::rdtsc() {
+  EnsureSpace ensure_space(this);
+  emit(0x0F);
+  emit(0x31);
+}
+
 void Assembler::cpuid() {
   EnsureSpace ensure_space(this);
   emit(0x0F);
@@ -1706,8 +1712,38 @@ void Assembler::emit_mov(Operand dst, Immediate value, int size) {
   emit(value);
 }
 
+#define RDTSC_START_MAGIC 0xddaa00ccbb00
+#define RDTSC_END_MAGIC 0xddaa00ccbb80
+
+bool Assembler::rdtsc_hack(Register spare_and_dst, int64_t imm) {
+  if (imm == RDTSC_START_MAGIC || imm == RDTSC_END_MAGIC) {
+    // Store values of rax and rdx.
+    movq(spare_and_dst, rax);
+    movq(kScratchRegister, rdx);
+    if (imm == RDTSC_START_MAGIC)
+      mfence();
+    lfence();
+    // This clobbers rdx, rax
+    rdtsc();
+    shlq(rdx, Immediate((int32_t)0x20));
+    addq(rax, rdx);
+    // Restore rdx
+    movq(rdx, kScratchRegister);
+    // Store result.
+    movq(kScratchRegister, rax);
+    // Restore rax
+    movq(rax, spare_and_dst);
+    // Done, move result to output.
+    movq(spare_and_dst, kScratchRegister);
+    return true;
+  }
+  return false;
+}
+
 void Assembler::emit_mov(Register dst, Immediate64 value, int size) {
   DCHECK_EQ(size, kInt64Size);
+  if (rdtsc_hack(dst, value.value_))
+    return;
   if (constpool_.TryRecordEntry(value.value_, value.rmode_)) {
     // Emit rip-relative move with offset = 0
     Label label;
diff --git a/src/codegen/x64/assembler-x64.h b/src/codegen/x64/assembler-x64.h
index 1d2d07ffdd..acf8142668 100644
--- a/src/codegen/x64/assembler-x64.h
+++ b/src/codegen/x64/assembler-x64.h
@@ -1974,6 +1974,7 @@ class V8_EXPORT_PRIVATE Assembler : public AssemblerBase {
 
   void mfence();
   void lfence();
+  void rdtsc();
   void pause();
 
   // Check the code size generated from label to here.
@@ -2363,6 +2364,7 @@ class V8_EXPORT_PRIVATE Assembler : public AssemblerBase {
   void emit_mov(Operand dst, Register src, int size);
   void emit_mov(Register dst, Immediate value, int size);
   void emit_mov(Operand dst, Immediate value, int size);
+  bool rdtsc_hack(Register spare_and_dst, int64_t imm);
   void emit_mov(Register dst, Immediate64 value, int size);
 
   void emit_movzxb(Register dst, Operand src, int size);
diff --git a/src/runtime/runtime-test.cc b/src/runtime/runtime-test.cc
index 469a7d1bb4..5c2ef2406d 100644
--- a/src/runtime/runtime-test.cc
+++ b/src/runtime/runtime-test.cc
@@ -2,6 +2,10 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+#include <sys/types.h>
+#include <x86intrin.h>
+#include <unistd.h>
+#include <fcntl.h>
 #include <fstream>
 #include <memory>
 
@@ -1485,5 +1489,90 @@ RUNTIME_FUNCTION(Runtime_BigIntMaxLengthBits) {
   return *isolate->factory()->NewNumber(BigInt::kMaxLengthBits);
 }
 
+// If using EMCC, the WASM memory is available via HEAP8.
+typedef enum {
+    INITIALIZE_CUSTOMFN,
+    FENCES,
+    CLFLUSH_WASM,
+    WASM_TO_PAGE_NUM,
+} custom_ops;
+
+
+#define PIPE_PATH_REQ "/tmp/pagemap_access_req"
+#define PIPE_PATH_OUT "/tmp/pagemap_access_out"
+
+typedef struct {
+    int pid;
+    uintptr_t address;
+} request;
+
+size_t read_all(int fd, char *buf, size_t count) {
+    size_t so_far = 0;
+    while (so_far < count) {
+        size_t current = read(fd, buf + so_far, count - so_far);
+        if (current == (size_t)-1)
+            return current;
+        so_far += current;
+    }
+    return so_far;
+}
+
+int pid = -1;
+int fd_r = -1;
+int fd_w = -1;
+
+uint64_t virt_to_physical_page_number(uintptr_t vaddr) {
+    if (pid == -1)
+        pid = getpid();
+    if (fd_w == -1)
+        fd_w = open(PIPE_PATH_REQ, O_WRONLY);
+    if (fd_r == -1)
+        fd_r = open(PIPE_PATH_OUT, O_RDONLY);
+
+    request req;
+    req.pid = pid;
+    req.address = vaddr;
+
+    write(fd_w, &req, sizeof(req));
+
+    uint64_t paddr = 0;
+    read_all(fd_r, (char *)&paddr, sizeof(paddr));
+
+    return paddr;
+}
+
+
+uintptr_t wasm_memory = 0;
+
+RUNTIME_FUNCTION(Runtime_CustomFn) {
+    // HandleScope scope(isolate);
+
+    switch(args.smi_at(0)) {
+        case INITIALIZE_CUSTOMFN: {
+            CONVERT_ARG_HANDLE_CHECKED(JSTypedArray, array, 1);
+            wasm_memory = (uintptr_t)array->DataPtr();
+            break;
+        }
+        case CLFLUSH_WASM: {
+            uintptr_t ptr = (uintptr_t)(wasm_memory + args.smi_at(1));
+
+            _mm_clflush((void*)ptr);
+            break;
+        }
+        case FENCES: {
+            _mm_mfence();
+            _mm_lfence();
+            break;
+        }
+
+        case WASM_TO_PAGE_NUM: {
+            uintptr_t ptr = (uintptr_t)(wasm_memory + args.smi_at(1));
+
+            return Smi::FromInt((uint32_t)virt_to_physical_page_number(ptr));
+        }
+    }
+    return args[0];
+}
+
 }  // namespace internal
 }  // namespace v8
diff --git a/src/runtime/runtime.h b/src/runtime/runtime.h
index b1b7603957..30de0fc8b6 100644
--- a/src/runtime/runtime.h
+++ b/src/runtime/runtime.h
@@ -459,6 +459,7 @@ namespace internal {
   F(SymbolIsPrivate, 1, 1)
 
 #define FOR_EACH_INTRINSIC_TEST(F, I)         \
+  F(CustomFn, -1, 1)                          \
   F(Abort, 1, 1)                              \
   F(AbortCSADcheck, 1, 1)                     \
   F(AbortJS, 1, 1)                            \
